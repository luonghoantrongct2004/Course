@model Exam
@using EduCourse.Entities
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager
@{
    var user = UserManager.GetUserAsync(User).Result;
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<style>
    .form-step {
        display: none;
    }

        .form-step:first-of-type {
            display: block; /* Show the first step initially */
        }

    button.next-step, button.prev-step {
        margin: 10px;
    }

    /* General styles for the chapter and lesson cards */
    .card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 16px;
        background-color: #f9f9f9;
        display: flex;
        flex-direction: column;
    }

        /* Style for the chapter title and inputs */
        .card h4 {
            margin-bottom: 8px;
            padding-left: 10px; /* Indentation for chapter titles */
        }

    /* Style for the chapter content */
    .card-content {
        display: flex;
        flex-direction: column;
    }

        /* Align the add lesson button next to the chapter title input */
        .card-content .button-container {
            display: flex;
            align-items: center;
            margin-top: 8px;
        }

            .card-content .button-container button {
                margin-left: 8px;
            }

    /* Style for lesson cards inside chapters */
    .lessons-container .card {
        margin-left: 30px; /* Indentation for lesson cards */
    }

    /* Optional: Styling for buttons and input fields */
    button {
        cursor: pointer;
        transition: background-color 0.3s;
    }

        button:hover {
            background-color: #4a90e2; /* Adjust based on your design */
        }

    .lesson-form {
        margin-bottom: 15px;
        margin-left: 20px; /* Khoảng cách thụt lùi từ lề trái */
        padding: 10px;
        border: 1px solid #ddd; /* Đường viền nhẹ */
        border-radius: 4px;
        background-color: #f9f9f9; /* Màu nền nhẹ */
        box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Đổ bóng nhẹ */
    }

    .form-input {
        width: 100%;
        padding: 8px;
        margin-bottom: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }
</style>

<style>
    .swal-custom-popup {
        background-color: #a52effa3;
        color: black;
    }

    .swal-custom-title {
        color: black;
    }

    .swal-custom-confirm, .swal-custom-cancel {
        background-color: #ffffffd9;
        color: #000000;
    }

        .swal-custom-confirm:hover, .swal-custom-cancel:hover {
            background-color: #ebebeb;
            color: black;
        }

</style>
<!-- write your code here-->
<div class="p-6">
    <div class="flex flex-col justify-between gap-5 mb-6 sm:flex-row">
        <div>
            <h3 class="mb-1 text-xl font-semibold leading-6 text-slate-800">
                Thêm Đề Thi
            </h3>
            <p class="text-sm text-slate-600">
                Thêm đề thi mới cho ngày
            </p>
        </div>
        <div>
            <a href="/admin/quiz"
               class="flex items-center px-4 py-3 text-sm text-white rounded-lg shadow-xs gap bg-primary">
                <svg width="24"
                     height="24"
                     viewBox="0 0 24 24"
                     fill="none"
                     xmlns="http://www.w3.org/2000/svg">
                    <path d="M19 11H9L12.29 7.71C12.3837 7.61704 12.4581 7.50644 12.5089 7.38458C12.5597 7.26272 12.5858 7.13201 12.5858 7C12.5858 6.86799 12.5597 6.73728 12.5089 6.61542C12.4581 6.49356 12.3837 6.38296 12.29 6.29C12.1026 6.10375 11.8492 5.99921 11.585 5.99921C11.3208 5.99921 11.0674 6.10375 10.88 6.29L6.59 10.59C6.21441 10.9633 6.00223 11.4704 6 12C6.00487 12.5261 6.21684 13.0291 6.59 13.4L10.88 17.7C10.9732 17.7926 11.0838 17.8659 11.2054 17.9157C11.3269 17.9656 11.4571 17.991 11.5885 17.9906C11.7199 17.9901 11.8499 17.9638 11.9712 17.913C12.0924 17.8623 12.2024 17.7882 12.295 17.695C12.3876 17.6018 12.4609 17.4912 12.5107 17.3696C12.5606 17.2481 12.586 17.1179 12.5856 16.9865C12.5851 16.8551 12.5588 16.7251 12.508 16.6038C12.4573 16.4826 12.3832 16.3726 12.29 16.28L9 13H19C19.2652 13 19.5196 12.8946 19.7071 12.7071C19.8946 12.5196 20 12.2652 20 12C20 11.7348 19.8946 11.4804 19.7071 11.2929C19.5196 11.1054 19.2652 11 19 11Z"
                          fill="currentColor" />
                </svg>
                Trở về
            </a>
        </div>
    </div>
    <div class="p-5 bg-white rounded-lg">
        <form id="courseForm">
            <input type="hidden" asp-for="AuthorID" value="@user.Id" />
            <div id="step-1" style="display: block; class="form-step">
                <div class="grid grid-cols-1 gap-5 lg:grid-cols-2">
                    <div class="border-b border-slate-200 col-span-full">
                        <h3 class="mb-2 text-xl font-semibold leading-6 text-mainblack">
                            Thông tin đề thi
                        </h3>
                        <span asp-validation-summary="All" class="text-red"></span>
                    </div>
                    <div class="col-span-full">
                        <label for="Title" class="block mb-2 text-sm font-medium leading-6 text-mainblack">Tên đề thi *</label>
                        <input type="text"
                               asp-for="Title"
                               class="w-full px-4 py-2 text-sm border rounded-lg text-mainblack placeholder:text-sm focus:ring-0 focus:border-primary h-11 border-slate-200 placeholder:text-slate-600"
                               placeholder="Tên cho đề thi" />
                    </div>
                    <div class="flex flex-col gap-4 mt-6 sm:flex-row">
                        <button type="button" onclick="nextStep(1)" class="px-12 py-3 text-sm font-medium leading-6 text-center text-white transition border rounded-lg hover:bg-opacity-80 bg-primary sm:text-base">
                            Tiếp theo
                        </button>
                    </div>
                </div>
            </div>
            <div id="step-2" class="form-step" style="display: none;">
                <h3 class="mb-2 text-xl font-semibold leading-6 text-mainblack">Thông tin câu hỏi</h3>
                <button type="button" onclick="addQuestion()" class="px-12 py-3 text-sm font-medium leading-6 text-center text-white transition border rounded-lg hover:bg-opacity-80 bg-primary sm:text-base">
                    Thêm câu hỏi
                </button>
                <div id="chaptersContainer" class="mt-4">
                </div>
                <div class="flex flex-col gap-4 mt-6 sm:flex-row">
                    <button type="button" onclick="prevStep(2)" class="px-12 py-3 text-sm font-medium leading-6 text-center text-red-500 border border-red-200 rounded-lg sm:text-base">
                        Quay lại
                    </button>
                    <button type="submit" class="submit-button px-12 py-3 text-sm font-medium leading-6 text-center text-white transition border rounded-lg hover:bg-opacity-80 bg-primary sm:text-base">
                        Tạo câu hỏi
                    </button>
                </div>
            </div>
            <script>
                document.getElementById('courseForm').addEventListener('submit', function (e) {
                    e.preventDefault();

                    Swal.fire({
                        title: 'Bạn có chắc chắn muốn tạo đề thi?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Có, tạo nó!',
                        cancelButtonText: 'Không, hủy!',
                        reverseButtons: true,
                        customClass: {
                            popup: 'swal-custom-popup',
                            title: 'swal-custom-title',
                            confirmButton: 'swal-custom-confirm',
                            cancelButton: 'swal-custom-cancel'
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            const formData = new FormData(this);

                            fetch('/Admin/Quiz/Create', {
                                method: 'POST',
                                body: formData
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire({
                                            title: 'Thành công!',
                                            text: data.message,
                                            icon: 'success',
                                            confirmButtonText: 'OK',
                                            customClass: {
                                                confirmButton: 'swal-custom-confirm'
                                            }
                                        }).then(() => {
                                            window.location.href = '/Admin/Quiz';
                                        });
                                    } else {
                                        Swal.fire({
                                            title: 'Lỗi!',
                                            text: data.message,
                                            icon: 'error',
                                            confirmButtonText: 'OK',
                                            customClass: {
                                                confirmButton: 'swal-custom-confirm'
                                            }
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error('Error:', error);
                                    Swal.fire({
                                        title: 'Lỗi!',
                                        text: 'Đã xảy ra lỗi bất ngờ.',
                                        icon: 'error',
                                        confirmButtonText: 'OK',
                                        customClass: {
                                            confirmButton: 'swal-custom-confirm'
                                        }
                                    });
                                });
                        } else if (result.dismiss === Swal.DismissReason.cancel) {
                            Swal.fire(
                                'Đã hủy',
                                'Khóa học chưa được tạo.',
                                'error'
                            );
                        }
                    });
                });

                function nextStep(currentStep) {
                    document.getElementById(`step-${currentStep}`).style.display = 'none';
                    document.getElementById(`step-${currentStep + 1}`).style.display = 'block';
                }

                function prevStep(currentStep) {
                    document.getElementById(`step-${currentStep}`).style.display = 'none';
                    document.getElementById(`step-${currentStep - 1}`).style.display = 'block';
                }

                function addQuestion() {
                    const questionsContainer = document.getElementById('chaptersContainer');
                    const questionIndex = questionsContainer.children.length;

                    const questionCard = document.createElement('div');
                    questionCard.classList.add('question-form');
                    questionCard.setAttribute('id', `question-card-${questionIndex}`);
                    questionCard.style.marginLeft = "10px";

                    questionCard.innerHTML = `
                        <div class="col-span-full flex justify-between items-center">
                            <h4><b>Câu hỏi ${questionIndex + 1}</b></h4>
                            <div>
                                <button type="button" onclick="toggleQuestion(${questionIndex})" class="ml-2">
                                    <i id="icon-${questionIndex}" class="fas fa-chevron-up"></i>
                                </button>
                                <button type="button" onclick="deleteQuestion(${questionIndex})" class="ml-2 text-red-600">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                        </div>

                        <div id="question-${questionIndex}" class="question-content" style="display: block;">
                            <label for="QuestionContent-${questionIndex}" class="block mb-2 text-sm font-medium leading-6 text-mainblack">
                                Nội dung câu hỏi
                            </label>
                            <textarea id="QuestionContent-${questionIndex}" name="Questions[${questionIndex}].Content"
                                      rows="3"
                                      class="w-full px-4 py-2 text-sm border rounded-lg text-mainblack placeholder:text-sm
                                      focus:ring-0 focus:border-primary border-slate-200 placeholder:text-slate-600"
                                      placeholder="Nhập nội dung câu hỏi"></textarea>

                            <label for="QuestionType-${questionIndex}" class="block mt-4 mb-2 text-sm font-medium leading-6 text-mainblack">
                                Loại câu hỏi
                            </label>
                            <select id="QuestionType-${questionIndex}" name="Questions[${questionIndex}].QuestionType"
                                    class="w-full px-4 py-2 text-sm border rounded-lg text-mainblack focus:ring-0 focus:border-primary border-slate-200">
                                <option value="Single Choice">Single Choice</option>
                                <option value="Multiple Choice">Multiple Choice</option>
                                <option value="Keyword">Keyword</option>
                            </select>

                            <label class="block mt-4 mb-2 text-sm font-medium leading-6 text-mainblack">Đáp án</label>
                            <div id="answersContainer-${questionIndex}" class="answers-container mt-4">
                                ${generateAnswerOptions(questionIndex)}
                            </div>
                        </div>
                    `;

                    questionsContainer.appendChild(questionCard);

                    // Xử lý sự kiện thay đổi QuestionType
                    document.getElementById(`QuestionType-${questionIndex}`).addEventListener('change', function () {
                        updateAnswerOptions(questionIndex);
                    });
                }

                function generateAnswerOptions(questionIndex) {
                    // Mặc định tạo ra cho kiểu Single Choice
                    let optionsHTML = '';
                    for (let i = 0; i < 4; i++) {
                        optionsHTML += `
                            <div class="flex items-center mb-2">
                                <input type="text" id="AnswerContent-${questionIndex}-${i}" name="Questions[${questionIndex}].Options[${i}].Content"
                                       class="w-full px-4 py-2 text-sm border rounded-lg text-mainblack placeholder:text-sm
                                       focus:ring-0 focus:border-primary h-11 border-slate-200 placeholder:text-slate-600"
                                       placeholder="Nhập đáp án" />
                                <input type="radio" name="Questions[${questionIndex}].CorrectAnswer" value="${i}" class="ml-2">
                            </div>
                        `;
                    }
                    return optionsHTML;
                }

                function updateAnswerOptions(questionIndex) {
                    const questionType = document.getElementById(`QuestionType-${questionIndex}`).value;
                    const answersContainer = document.getElementById(`answersContainer-${questionIndex}`);

                    if (questionType === 'Single Choice') {
                        answersContainer.innerHTML = generateAnswerOptions(questionIndex);
                    } else if (questionType === 'Multiple Choice') {
                        answersContainer.innerHTML = generateMultipleChoiceOptions(questionIndex);
                    } else if (questionType === 'Keyword') {
                        answersContainer.innerHTML = `
                            <div class="flex items-center mb-2">
                                <input type="text" id="KeywordAnswer-${questionIndex}" name="Questions[${questionIndex}].CorrectAnswer"
                                       class="w-full px-4 py-2 text-sm border rounded-lg text-mainblack placeholder:text-sm
                                       focus:ring-0 focus:border-primary h-11 border-slate-200 placeholder:text-slate-600"
                                       placeholder="Nhập từ khóa chính xác" />
                            </div>
                        `;
                    }
                }

                function generateMultipleChoiceOptions(questionIndex) {
                    let optionsHTML = '';
                    for (let i = 0; i < 4; i++) {
                        optionsHTML += `
                            <div class="flex items-center mb-2">
                                <input type="text" id="AnswerContent-${questionIndex}-${i}" name="Questions[${questionIndex}].Options[${i}].Content"
                                       class="w-full px-4 py-2 text-sm border rounded-lg text-mainblack placeholder:text-sm
                                       focus:ring-0 focus:border-primary h-11 border-slate-200 placeholder:text-slate-600"
                                       placeholder="Nhập đáp án" />
                                <input type="checkbox" name="Questions[${questionIndex}].CorrectAnswer" value="${i}" class="ml-2">
                            </div>
                        `;
                    }
                    return optionsHTML;
                }

                function generateAnswerOptions(questionIndex) {
                    let optionsHTML = '';
                    for (let i = 0; i < 4; i++) {
                        optionsHTML += `
                                            <div class="flex items-center mb-2">
                                                <input type="text" id="AnswerContent-${questionIndex}-${i}" name="Questions[${questionIndex}].Options[${i}].Content"
                                                       class="w-full px-4 py-2 text-sm border rounded-lg text-mainblack placeholder:text-sm
                                                       focus:ring-0 focus:border-primary h-11 border-slate-200 placeholder:text-slate-600"
                                                       placeholder="Nhập đáp án" />
                                                <input type="radio" name="Questions[${questionIndex}].CorrectAnswer" value="${i}" class="ml-2" required>
                                            </div>
                                        `;
                    }
                    return optionsHTML;
                }

                // Toggle function to open/close question
                function toggleQuestion(questionIndex) {
                    const questionContent = document.getElementById(`question-${questionIndex}`);
                    const icon = document.getElementById(`icon-${questionIndex}`);

                    if (questionContent.style.display === 'none') {
                        questionContent.style.display = 'block';
                        icon.className = 'fas fa-chevron-up'; // Change to up arrow icon
                    } else {
                        questionContent.style.display = 'none';
                        icon.className = 'fas fa-chevron-down'; // Change to down arrow icon
                    }
                }

                // Function to delete a question with confirmation
                function deleteQuestion(questionIndex) {
                    Swal.fire({
                        title: 'Bạn có chắc chắn muốn xóa câu hỏi này?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Có, xóa!',
                        cancelButtonText: 'Không, hủy!',
                        reverseButtons: true,
                        customClass: {
                            popup: 'swal-custom-popup',
                            title: 'swal-custom-title',
                            confirmButton: 'swal-custom-confirm',
                            cancelButton: 'swal-custom-cancel'
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            const questionCard = document.getElementById(`question-card-${questionIndex}`);
                            questionCard.remove(); // Remove the question from the DOM
                            Swal.fire(
                                'Đã xóa!',
                                'Câu hỏi đã được xóa.',
                                'success'
                            );
                        }
                    });
                }


            </script>
        </form>

    </div>
</div>
<!-- write your code here-->
